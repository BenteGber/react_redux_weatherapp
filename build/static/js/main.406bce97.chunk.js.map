{"version":3,"sources":["components/WeatherContainer.js","actions/actions.js","actions/types.js","reducers/Reducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["WeatherContainer","handleClick","_this","props","fetchWeather","geoData","this","fetchGeo","_this$props","weatherData","lat","react_default","a","createElement","className","main","type","onClick","_weatherData$weather$","weather","icon","_weatherData$main","temp","temp_max","temp_min","name","src","concat","alt","Component","connect","state","appData","error","dispatch","navigator","geolocation","getCurrentPosition","position","cordinates","coords","latitude","long","longitude","payload","latLong","queryString","fetch","then","res","json","initialState","combineReducers","arguments","length","undefined","action","Object","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","components_WeatherContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.406bce97.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { fetchGeo, fetchWeather } from '../actions/actions';\nimport { connect } from 'react-redux';\n\nclass WeatherContainer extends Component {\n  //Once Component Mounts we get the Geolocation from the HTML5 Navigator\n  componentDidMount() {\n    this.props.fetchGeo();\n  }\n\n  handleClick = () => {\n    this.props.fetchWeather(this.props.geoData);\n  };\n\n  render() {\n    const { geoData, weatherData } = this.props;\n\n    //If no Geodata is present load the 'loading' spinner while we wait for the location data\n    if (!geoData.lat) {\n      return (\n        <div>\n        <p> Waiting for location</p>\n          <div className=\"loader\">Loading</div>\n        </div>\n      );\n    }\n    //If Geodata is present but no weather data dipslay the button so they can fetch the weather.\n    if (!weatherData.main) {\n      return (\n        <div>\n          <h2> Click the button below to check the weather </h2>\n          <button type=\"button\" onClick={this.handleClick}>\n           Current Weather\n          </button>\n        </div>\n      );\n    }\n    const { main, icon } = weatherData.weather[0];\n    const { temp, temp_max, temp_min } = weatherData.main;\n    //future add dynamic css based on data recieved from weather api\n    return (\n      <div>\n        <h1>{weatherData.name}</h1>\n        <img src={`http://openweathermap.org/img/w/${icon}.png`} alt={main} />\n        <h2>{main}</h2>\n        <h2>Current Temp: {temp}</h2>\n        <h3>Today's High: {temp_max}</h3>\n        <h3>Today's Low: {temp_min}</h3>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  weatherData: state.appData.weatherData,\n  geoData: state.appData.geoData,\n  error: state.appData.error,\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchGeo, fetchWeather },\n)(WeatherContainer);\n","import { FETCH_GEO, FETCH_WEATHER } from './types';\n\nexport const fetchGeo = () => (dispatch) => {\n  //In the future: Add Error handling in case user refuses location or geolocation fails\n  navigator.geolocation.getCurrentPosition((position) => {\n    const cordinates = {\n      lat: position.coords.latitude,\n      long: position.coords.longitude,\n    };\n    dispatch({\n      type: FETCH_GEO,\n      payload: cordinates,\n    });\n  });\n};\n\nexport const fetchWeather = (latLong) => (dispatch) => {\n  const { lat, long } = latLong;\n  const path = 'https://api.openweathermap.org/data/2.5/weather';\n  const queryString = `${path}?lat=${lat}&lon=${long}&appid=49743dc9fb7620f4df74b26b1e4d0a9b&units=imperial`;\n  fetch(queryString)\n    .then((res) => res.json())\n    .then((weatherData) => {\n      dispatch({\n        type: FETCH_WEATHER,\n        payload: weatherData,\n      });\n    });\n};\n","export const FETCH_GEO = 'FETCH_GEO';\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\n","import { FETCH_GEO, FETCH_WEATHER } from '../actions/types';\n\nconst initialState = {\n  weatherData: {},\n  geoData: {},\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_GEO:\n      return {\n        ...state,\n        geoData: action.payload,\n      };\n    case FETCH_WEATHER:\n      return {\n        ...state,\n        weatherData: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport Reducer from './Reducer';\n\nexport default combineReducers({\n  appData: Reducer,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { WeatherContainer } from './components/index';\n\nimport store from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div className=\"wrapper\">\n              <WeatherContainer />\n            </div>\n          </header>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}